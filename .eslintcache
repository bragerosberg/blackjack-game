[{"C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\index.js":"1","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\App.js":"2","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\board\\Board.jsx":"3","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\card\\Card.jsx":"4","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\card\\carddeck.js":"5","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\common\\participant\\Participant.jsx":"6","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\player\\Player.jsx":"7","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\dealer\\Dealer.jsx":"8"},{"size":219,"mtime":1609336509042,"results":"9","hashOfConfig":"10"},{"size":259,"mtime":1609350064741,"results":"11","hashOfConfig":"10"},{"size":2360,"mtime":1609426913611,"results":"12","hashOfConfig":"10"},{"size":443,"mtime":1609593103346,"results":"13","hashOfConfig":"10"},{"size":7322,"mtime":1609592832146,"results":"14","hashOfConfig":"10"},{"size":437,"mtime":1609352912300,"results":"15","hashOfConfig":"10"},{"size":477,"mtime":1609353123081,"results":"16","hashOfConfig":"10"},{"size":780,"mtime":1609593879231,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1j9gx6a",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\index.js",[],["38","39"],"C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\App.js",[],"C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\board\\Board.jsx",["40","41"],"import React, { useEffect, useState } from 'react';\r\nimport Dealer from '../dealer/Dealer';\r\nimport Player from '../player/Player';\r\nimport cards from '../card/carddeck';\r\nimport './Board.css';\r\n\r\nconst Board = () => {\r\n  // the last card for each participant\r\n  const [dealerCard, setDealerCard] = useState(null);\r\n  const [playerCard, setPlayerCard] = useState(null);\r\n\r\n  const [allDealerCards, setAllDealerCards] = useState([]);\r\n  const [allPlayerCards, setAllPlayerCards] = useState([]);\r\n\r\n  // whos turn\r\n  const [dealerTurn, toggleDealerTurn] = useState(false);\r\n\r\n  // carddeck and last card\r\n  const [cardDeck, setCardDeck] = useState(cards);\r\n  const [card, setCard] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (allDealerCards.length < 2) setDealerCard(randomCard(cardDeck, \"dealer\"));\r\n    if (allPlayerCards.length < 2) setPlayerCard(randomCard(cardDeck, \"player\"));\r\n    if (dealerTurn === true && dealerCard === null) setDealerCard(randomCard(cardDeck, \"dealer\"));\r\n    if (dealerTurn === false && playerCard === null) setPlayerCard(randomCard(cardDeck, \"player\"));\r\n  });\r\n  \r\n  // remove picked card from deck\r\n  const removeCard = (selectedCard) => {\r\n    setCardDeck(cardDeck.filter(card => card.id !== selectedCard.id));\r\n  }\r\n  \r\n  \r\n  // select random card from deck\r\n  const randomCard = (arr, participant) => {\r\n    const card = arr[arr.length * Math.random() | 0];\r\n    setCard(card);\r\n    removeCard(card);\r\n    \r\n    if(participant === \"dealer\") {\r\n      setAllDealerCards([...allDealerCards, card]);\r\n      setDealerCard(null);\r\n    } else {\r\n      setPlayerCard(null);\r\n      setAllPlayerCards([...allPlayerCards, card]);\r\n    }\r\n    \r\n    return card;\r\n  }\r\n\r\n  return (\r\n    <div className=\"blackjack__wrapper\">\r\n      <button className=\"blackjack__draw__btn\" onClick={() => toggleDealerTurn(!dealerTurn) }>Draw Card</button>\r\n      <section>\r\n        <aside className=\"blackjack__dealer__wrapper\">\r\n          {allDealerCards.map((dealerCard, index) => (\r\n            <Dealer number={index} key={dealerCard.id} card={dealerCard}/>\r\n          ))}\r\n        </aside>\r\n        <aside className=\"blackjack__player__wrapper\">\r\n          {allPlayerCards.map(playerCard => (\r\n            <Player key={playerCard.id} card={playerCard}/>\r\n          ))}\r\n        </aside>\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board;","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\card\\Card.jsx",["42"],"C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\card\\carddeck.js",[],"C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\common\\participant\\Participant.jsx",["43"],"import React, { useState, useEffect } from 'react';\r\nimport Card from '../../card/Card';\r\n\r\nconst Participant = (props) => {\r\n  const [card, setCard] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setCard(props.card);\r\n  })\r\n\r\n  return card !== null ? (\r\n    <div>\r\n      <p>Participant</p>\r\n      <Card card={card}/>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <p>Loading Participant...</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Participant; ","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\player\\Player.jsx",["44","45"],"import React, {useState, useEffect} from 'react';\r\nimport Card from '../card/Card';\r\nimport Participant from '../common/participant/Participant';\r\n\r\nconst Player = (props) => {\r\n  const [card, setCard] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setCard(props.card);\r\n  })\r\n\r\n  return card !== null ? (\r\n    <div>\r\n      <p>Player</p>\r\n      <Card card={card}/>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <p>Loading Player...</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Player;\r\n\r\n","C:\\Users\\Brage Røsberg\\Documents\\dev\\blackjack\\src\\components\\dealer\\Dealer.jsx",["46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":20,"column":10,"nodeType":"54","messageId":"55","endLine":20,"endColumn":14},{"ruleId":"56","severity":1,"message":"57","line":22,"column":3,"nodeType":"54","endLine":22,"endColumn":12,"suggestions":"58"},{"ruleId":"56","severity":1,"message":"59","line":7,"column":3,"nodeType":"54","endLine":7,"endColumn":12,"suggestions":"60"},{"ruleId":"56","severity":1,"message":"59","line":7,"column":3,"nodeType":"54","endLine":7,"endColumn":12,"suggestions":"61"},{"ruleId":"52","severity":1,"message":"62","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":19},{"ruleId":"56","severity":1,"message":"59","line":8,"column":3,"nodeType":"54","endLine":8,"endColumn":12,"suggestions":"63"},{"ruleId":"52","severity":1,"message":"62","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":19},{"ruleId":"56","severity":1,"message":"64","line":10,"column":3,"nodeType":"54","endLine":10,"endColumn":12,"suggestions":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'card' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDealerCard'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [allDealerCards.length, randomCard, cardDeck, allPlayerCards.length, dealerTurn, dealerCard, playerCard] as a second argument to the useEffect Hook.",["68"],"React Hook useEffect contains a call to 'setCard'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.card] as a second argument to the useEffect Hook.",["69"],["70"],"'Participant' is defined but never used.",["71"],"React Hook useEffect contains a call to 'setCard'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.card, props.number] as a second argument to the useEffect Hook.",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"75","fix":"77"},{"desc":"75","fix":"78"},{"desc":"79","fix":"80"},"Add dependencies array: [allDealerCards.length, randomCard, cardDeck, allPlayerCards.length, dealerTurn, dealerCard, playerCard]",{"range":"81","text":"82"},"Add dependencies array: [props.card]",{"range":"83","text":"84"},{"range":"85","text":"84"},{"range":"86","text":"84"},"Add dependencies array: [props.card, props.number]",{"range":"87","text":"88"},[1091,1091],", [allDealerCards.length, randomCard, cardDeck, allPlayerCards.length, dealerTurn, dealerCard, playerCard]",[199,199],", [props.card]",[221,221],[273,273],[392,392],", [props.card, props.number]"]